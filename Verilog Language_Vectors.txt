//Verilog Language
//Vectors 

//1.Vectors:Build a circuit that has one 3-bit input, then outputs the same vector, and also splits it into three separate 1-bit outputs.
//Connect output o0 to the input vector's position 0, o1 to position 1, etc.
//Code:
module top_module ( 
    input [2:0] vec,
    output [2:0] outv,
    output o2,
    output o1,
    output o0); 
    assign o0 = vec[0];
    assign o1 = vec[1];
    assign o2 = vec[2];
    // This is also write as: assign {o2, o1, o0} = vec;
    assign outv = vec;
endmodule


//2.Vectors in more detail
//Build a combinational circuit that splits an input half-word (16 bits, [15:0] ) into lower [7:0] and upper [15:8] bytes.
//Code:
module top_module (
	input [15:0] in,
	output [7:0] out_hi,
	output [7:0] out_lo);
	assign out_hi = in[15:8];
	assign out_lo = in[7:0];
	
	// Concatenation operator also works: assign {out_hi, out_lo} = in;
endmodule


//3.Verilog part select
//A 32-bit vector can be viewed as containing 4 bytes (bits [31:24], [23:16], etc.). Build a circuit that will reverse the byte ordering of the 4-byte word
//Code:
module top_module( 
    input [31:0] in,
    output [31:0] out );
    assign out[31:24] = in[7:0];
    assign out[23:16] = in[15:8];
    assign out[15:8] = in[23:16];
    assign out[7:0] = in[31:24];
endmodule


//4.Bitwise operators
//Build a circuit that has two 3-bit inputs that computes the bitwise-OR of the two vectors, the logical-OR of the two vectors, 
//and the inverse (NOT) of both vectors. Place the inverse of b in the upper half of out_not (i.e., bits [5:3]), and the inverse of a in the lower half.
//Code:
module top_module( 
    input [2:0] a,
    input [2:0] b,
    output [2:0] out_or_bitwise,
    output out_or_logical,
    output [5:0] out_not);
    assign out_or_bitwise = a|b;
    assign out_or_logical = a||b;
    assign out_not[5:3] = ~b;
    assign out_not[2:0] = ~a;
endmodule


//5.Four-inputs gates
//Build a combinational circuit with four inputs, in[3:0]
//Code:
module top_module( 
    input [3:0] in,
    output out_and,
    output out_or,
    output out_xor);
    assign out_and = in[0]&in[1]&in[2]&in[3];
    assign out_or  = in[0]|in[1]|in[2]|in[3];
    assign out_xor = in[0]^in[1]^in[2]^in[3];
endmodule


//6.Vector concatenation operator
//There are six 5-bit input vectors: a, b, c, d, e, and f, for a total of 30 bits of input. 
//There are four 8-bit output vectors: w, x, y, and z, for 32 bits of output
//Code:
module top_module (
    input [4:0] a, b, c, d, e, f,
    output [7:0] w, x, y, z );
    assign w= {a[4:0],b[4:2]};
    assign x= {b[1:0],c[4:0],d[4]};
    assign y= {d[3:0],e[4:1]};
    assign z= {e[0],f[4:0],2'b11};
endmodule


//7.Vector reversal 1
//Given an 8-bit input vector [7:0], reverse its bit ordering.
//Code:
module top_module( 
    input [7:0] in,
    output [7:0] out);
    assign out = {in[0],in[1],in[2],in[3],in[4],in[5],in[6],in[7]};
endmodule


//8.Replication operator
//Build a circuit that sign-extends an 8-bit number to 32 bits. 
//This requires a concatenation of 24 copies of the sign bit (i.e., replicate bit[7] 24 times) followed by the 8-bit number itself.
//Code:
module top_module (
    input [7:0] in,
    output [31:0] out );
    assign out = {{24{in[7]}},in};
endmodule


//9.More replication
//Code:
module top_module (
	input a, b, c, d, e,
	output [24:0] out);
	wire [24:0] top, bottom;
	assign top    = { {5{a}}, {5{b}}, {5{c}}, {5{d}}, {5{e}} };
	assign bottom = {5{a,b,c,d,e}};
	assign out = ~top ^ bottom;	
	// or we can write it as: assign out = ~{ {5{a}}, {5{b}}, {5{c}}, {5{d}}, {5{e}} } ^ {5{a,b,c,d,e}};
  // or we can write it as: assign out[24:0] = {~{5{a}}^{a,b,c,d,e}, ~{5{b}}^{a,b,c,d,e}, ~{5{c}}^{a,b,c,d,e}, ~{5{d}}^{a,b,c,d,e}, ~{5{e}}^{a,b,c,d,e}};
endmodule


