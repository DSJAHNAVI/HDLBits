//1.4 bit binary counter
//Code:
module top_module (input clk,input reset,output [3:0] q);
	always @ (posedge clk) begin
        if (reset) q <= 4'd0;
        else q <= q+4'd1;
    end
endmodule


//2.Count10(0-9)
//Code:
module top_module (input clk,input reset,output [3:0] q);
    always @(posedge clk) begin
        if(reset) q <= 0;
        else
            if(q == 9) q <= 0;
            else q <= q + 1;
    end 
endmodule


//3.Count10(1-10)
//Code:
module top_module (input clk,input reset,output [3:0] q);
    always @(posedge clk)begin
        if(reset) q<=1;
        else if (q == 10) q<=1;
        else q<=q+1;
    end
endmodule


//4.Slow decade counter
//Code:
module top_module (input clk,input slowena,input reset,output [3:0] q);
    always @(posedge clk)begin
        if (reset) q<=0;
          else begin
            if(slowena) begin
                if (q==9) begin
                    q<=0;
                end
                else begin
                    q <= q+1;
                end
            end
          end
    end
endmodule


//5.Counter 1-12
//Code:
module top_module (input clk,input reset,input enable,output [3:0] Q,output c_enable,output c_load,output [3:0] c_d); 
    wire [3:0] Q_tmp;
    assign c_enable = enable;
    assign c_d = c_load ? 1 : 0;
    always @(posedge clk) begin
        if(reset) begin
            Q <= 1;
            Q_tmp <= 1;
        end
        else begin
            if(enable) begin
                if(Q == 12) begin
                    Q <= 1;
                    Q_tmp <= 1;
                end
                else begin
                    Q <= Q + 1;
                    Q_tmp <= Q_tmp + 1;
                end
            end
        end
    end
    always @(*) begin
        if(reset || (Q == 12 && c_enable)) begin
            c_load <= 1;
        end
        else begin
            c_load <= 0;
        end
    end
    count4 the_counter (clk, c_enable, c_load, c_d, Q_tmp);
endmodule


//6.Counter 1000
//Code:
module top_module (input clk,input reset,output OneHertz,output [2:0] c_enable); //
wire [3:0] q0, q1, q2;
    bcdcount counter0 (clk, reset, c_enable[0], q0);
    bcdcount counter1 (clk, reset, c_enable[1], q1);
    bcdcount counter2 (clk, reset, c_enable[2], q2);
    assign c_enable = {(q1 == 4'd9) && (q0 == 4'd9), q0 == 4'd9, 1'b1};
    assign OneHertz = (q2 == 4'd9) && (q1 == 4'd9) && (q0 == 4'd9);
endmodule


//7.4 digit decimal counter
//Code:
module top_module (input clk,input reset,output [3:1] ena,output [15:0] q);
    always @(posedge clk) begin
        if(reset) begin
            q = 0;
            ena = 0;
        end
        else begin
            q[3:0] = q[3:0] + 1;
            ena[1] = (q[3:0] == 9) ? 1 : 0;
            if(q[3:0] == 10) begin
                q[3:0] = 0;
                q[7:4] = q[7:4] + 1;
            end
            ena[2] = ((q[7:4] == 9) && (q[3:0] == 9)) ? 1 : 0;
            if(q[7:4] == 10) begin
                q[7:4] = 0;
                q[11:8] = q[11:8] + 1;
            end
            ena[3] = ((q[11:8] == 9) && (q[7:4] == 9) && (q[3:0] == 9)) ? 1 : 0;
            if(q[11:8] == 10) begin
                q[11:8] = 0;
                q[15:12] = q[15:12] + 1;
            end
            if(q[15:12] == 10) begin
                q = 0;
            end
        end
    end
endmodule


//8.12-hour clock
//Code:
module top_module(input clk,input reset,input ena,output pm,output [7:0] hh,output [7:0] mm,output [7:0] ss); 
    reg p;  //0: am, 1: pm
    reg [7:0] h;
    reg [7:0] m;
    reg [7:0] s;
    always @ (posedge clk) begin
      if(reset)begin
        p <= 0;
        h <= 8'h12;
        m <= 8'h00;
        s <= 8'h00;
      end
      else begin
        if(ena) begin
            if(s < 8'h59) begin
                if(s[3:0] < 4'h9) begin
                    s[3:0] <= s[3:0] + 1'h1; 
                end
                else begin
                    s[3:0] <= 0;
                    s[7:4] <= s[7:4] + 1'h1;
                end 
            end
            else begin
              s <= 0;
                 if(m < 8'h59) begin
                    if(m[3:0] < 4'h9) begin
                       m[3:0] <= m[3:0] + 1'h1; 
                    end 
                    else begin
                       m[3:0] <= 0;
                       m[7:4] <= m[7:4] + 1'h1;
                    end
                 end
                 else begin
                    m <= 1'h0;
                      if(h == 8'h11)
                         p = !p;
                            if(h < 8'h12) begin
                                if(h[3:0] < 4'h9)
                                   h[3:0] <= h[3:0] + 1'h1;
                                else begin
                 		   h[3:0] <= 4'h0;
                                    h[7:4] <= h[7:4] + 1'h1;
                                end
                             end
                      else begin
                         h <= 1'h1; 
                      end
                 end
             end
          end
      end
   end
    assign pm = p;
    assign hh = h;
    assign mm = m;
    assign ss = s;
endmodule


