//1.4 bit shift register
//Code:
module top_module(input clk,input areset,input load,input ena,input [3:0] data,output reg [3:0] q);
    always @(posedge clk or posedge areset) begin
        if(areset) q <= 0;
        else
            if(load == 1) q <= data;  
            else
                if(ena == 1) q = q >> 1;
    end  
endmodule


//2.Rotate100
//Code:
module top_module(input clk,input load,input [1:0] ena,input [99:0] data,output reg [99:0] q); 
	always @(posedge clk ) begin
        if(load == 1) q = data;
        else 
          if(ena[0]^ena[1])
  		    case (ena)
     		  2'b01: q <= {q[0], q[99:1]};
     		  2'b10: q <= {q[98:0], q[99]};
  		    endcase
    end
endmodule
 


//3.Shift18
//Code:
module top_module(input clk,input load,input ena,input [1:0] amount,input [63:0] data,output reg [63:0] q); 
     always @(posedge clk) begin
        if(load == 1)begin
            q = data;
        end
        else begin
            if(ena == 1) begin
                case(amount)
                    2'b00: q <= q << 1;
                    2'b01: q <= q << 8;
                    2'b10: begin
                        q <= q >> 1;
                        if(q[63] == 1) begin
                            q[63] <= 1;
                        end
                    end
                    2'b11: begin
                        q <= q >> 8;
                        if(q[63] == 1) begin
                            q[63:56] <= {8{1'b1}};
                        end
                    end
                endcase
            end
        end
    end 
endmodule


//4.Lfsr5
//Code:
module top_module(input clk,input reset,output [4:0] q); 
	    always @(posedge clk) begin
            if(reset) q <= 5'h1;
        	else
            	q <= {0 ^ q[0], q[4], q[3] ^ q[0], q[2], q[1]};
        end
endmodule


//5.Mt2015 lfsr
//Code:
module top_module (input [2:0] SW,input [1:0] KEY,output [2:0] LEDR);
    wire [2:0] R;
    reg [2:0] Q;
    wire clk,L;
    assign clk = KEY[0];
    assign L = KEY[1];
    assign R = SW;
    always @(posedge clk) begin
        Q <= {(L) ? R[2] : (Q[1] ^ Q[2]), (L) ? R[1] : Q[0], (L) ? R[0] : Q[2]};
    end 
    assign LEDR = Q;
endmodule


//6.Lfsr32
//Code:
module top_module(input clk,input reset,output [31:0] q); 
    always @(posedge clk) begin
        if(reset) q <= 32'h1;
        else
            q <= {0 ^ q[0], q[31:23], q[22] ^ q[0], q[21:3], q[2] ^ q[0], q[1] ^ q[0]};
    end
endmodule


//7.Exams/m2014 q4k
//Code:
module top_module (input clk,input resetn,input in,output out);
    reg [2:0] Q; 
    always @(posedge clk) begin
        Q[0] <= (resetn) ? in : 0;
        Q[1] <= (resetn) ? Q[0] : 0;
        Q[2] <= (resetn) ? Q[1] : 0;
        out <= (resetn) ? Q[2] : 0;
    end
endmodule


//8.Exams/2014 q4b
//Code:
module top_module (input [3:0] SW,input [3:0] KEY,output [3:0] LEDR);
    MUXDFF ins0(SW[3], KEY[0], KEY[1], KEY[2], KEY[3], LEDR[3]);
    MUXDFF ins1(SW[2], KEY[0], KEY[1], KEY[2], LEDR[3], LEDR[2]);
    MUXDFF ins2(SW[1], KEY[0], KEY[1], KEY[2], LEDR[2], LEDR[1]);
    MUXDFF ins3(SW[0], KEY[0], KEY[1], KEY[2], LEDR[1], LEDR[0]);
endmodule
module MUXDFF (input R,input clk,input E,input L,input w,output out);
    wire [1:0] mid;
    assign mid[0] = E ? w : out;
    assign mid[1] = L ? R : mid[0];  
    always @(posedge clk) begin
        out <= mid[1];
    end
endmodule


//9.3 input LUT
//Code:
module top_module (input clk,input enable,input S,input A, B, C,output Z ); 
	reg [7:0] Q = 0;
    always @(posedge clk) begin
        if(enable) Q <= {Q[6:0], S};
    end
    assign Z = Q[{A, B, C}];
endmodule
