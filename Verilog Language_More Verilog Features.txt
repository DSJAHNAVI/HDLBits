//1.Conditional Ternary Operator
//Code:
module top_module (input [7:0] a, b, c, d,output [7:0] min);
    wire [7:0] int1, int2;  
    //condition ? if_true : if_false
    assign int1 = (a<b)? a:b; 
    assign int2 = (int1<c)? int1:c;
    assign min  = (int2<d)? int2:d;
endmodule


//2.Reduction Operators
//Code:
module top_module (
    input [7:0] in,
    output parity); 
    assign parity = ^ in[7:0];
endmodule


//3.Reduction:Even wider gates
//Code:
module top_module(input [99:0] in,output out_and,output out_or,output out_xor);
    assign out_and = & in[99:0];
    assign out_or  = | in[99:0];
    assign out_xor = ^ in[99:0];
endmodule


//4.Vector reversal 2
//Code:
module top_module(input [99:0] in,output [99:0] out);
        integer i;
    always @ (in) begin 
        for (i=0;i<100; i=i+1) begin
            out[99-i] = in[i];
        end        
    end
endmodule


//5.255 bit population count
//Code:
module top_module( input [254:0] in,output [7:0] out );
	    integer i;
    reg [7:0] counter;
    always @ (in) begin
        counter = 0;
        for (i=0; i<255; i=i+1) begin
            if (in[i]==1'b1) 
                counter = counter+1'b1;
        end     	
        out = counter;
    end
endmodule


//6.100 bit binary adder 2
//Code:
module full_adder(input a,b,input cin,output cout,sum);   
    assign sum  = a^b^cin;
    assign cout = (a&b)|(b&cin)|(cin&a);
endmodule

module top_module( input [99:0] a, b,input cin,output [99:0] cout,output [99:0] sum );
    genvar i; 
    full_adder inst1(a[0],b[0],cin,cout[0],sum[0]);
    generate
        for (i=1; i<100; i=i+1) begin : Full_adder_block
        full_adder inst(a[i],b[i],cout[i-1],cout[i],sum[i]);
    end
    endgenerate
endmodule


//7.
//Code:
module top_module( input [399:0] a, b,input cin,output cout,output [399:0] sum );
    wire[99:0] cout_wires;
    genvar i;   
    generate
        bcd_fadd(a[3:0], b[3:0], cin, cout_wires[0],sum[3:0]);
        for (i=4; i<400; i=i+4) begin: bcd_adder_instances
            bcd_fadd bcd_adder(a[i+3:i], b[i+3:i], cout_wires[i/4-1],cout_wires[i/4],sum[i+3:i]);
        end
    endgenerate  
    assign cout = cout_wires[99];
endmodule
