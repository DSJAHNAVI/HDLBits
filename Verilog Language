//Verilog language
//Basics

//1.Simple Wire
//Create a module with one input and one output that behaves like a wire.
//Code:
module top_module( input in, output out );
	assign out = in;
endmodule


//2.Four wires
/*Create a module with 3 inputs and 4 outputs that behaves like wires that makes these connections:
a -> w
b -> x
b -> y
c -> z*/
//Code:
module top_module( 
    input a,b,c,
    output w,x,y,z );
	  assign w = a;
    assign x = b;
    assign y = b;
    assign z = c;
    // or using the concatenation operator is equivalent and shorter:
	  // assign {w,x,y,z} = {a,b,b,c};    
endmodule


//3.Inverter
//Create a module that implements a NOT gate.
//Code:
module top_module( input in, output out );
	assign out = ~in;
endmodule

//4.AND Gate
//Create a module that implements an AND gate.
//Code:
module top_module( 
    input a, 
    input b, 
    output out );
    assign out = a&&b;
endmodule

//5.NOR Gate
//Create a module that implements a NOR gate.
//Code:
module top_module( 
    input a, 
    input b, 
    output out );
    assign out = ~(a||b);
endmodule

//6.XNOR Gate
//Create a module that implements an XNOR gate.
//Code:
module top_module( 
    input a, 
    input b, 
    output out );
    assign out = ~(a^b);
endmodule

//7.Declaring wires
//Code:
module top_module(
    input a,
    input b,
    input c,
    input d,
    output out,
    output out_n   ); 
    wire x,y,z;
    assign x = a&&b;
    assign y = c&&d;
    assign z = x||y;
    assign out = z;
    assign out_n = ~z;
endmodule

//7458
//The 7458 is a chip with four AND gates and two OR gates.
//Code:
module top_module ( 
    input p1a, p1b, p1c, p1d, p1e, p1f,
    output p1y,
    input p2a, p2b, p2c, p2d,
    output p2y );
    wire w,x,y,z;
    assign w = p2a&&p2b;
    assign x = p2c&&p2d;
    assign y = p1a&&p1b&&p1c;
    assign z = p1d&&p1e&&p1f;
    assign p1y = y||z;
    assign p2y = w||x;
endmodule

